diff --git a/node_modules/react-native-scroll-bottom-sheet/src/index.tsx b/node_modules/react-native-scroll-bottom-sheet/src/index.tsx
index c4dbcce..fd4b530 100644
--- a/node_modules/react-native-scroll-bottom-sheet/src/index.tsx
+++ b/node_modules/react-native-scroll-bottom-sheet/src/index.tsx
@@ -11,6 +11,7 @@ import {
   StyleSheet,
   View,
   ViewStyle,
+  Animated as RNAnimated
 } from 'react-native';
 import Animated, {
   abs,
@@ -20,13 +21,13 @@ import Animated, {
   Clock,
   clockRunning,
   cond,
-  Easing,
+  EasingNode,
   eq,
   event,
   Extrapolate,
   greaterOrEq,
   greaterThan,
-  interpolate,
+  interpolateNode,
   multiply,
   not,
   onChange,
@@ -56,7 +57,7 @@ const DRAG_TOSS = 0.05;
 const IOS_NORMAL_DECELERATION_RATE = 0.998;
 const ANDROID_NORMAL_DECELERATION_RATE = 0.985;
 const DEFAULT_ANIMATION_DURATION = 250;
-const DEFAULT_EASING = Easing.inOut(Easing.linear);
+const DEFAULT_EASING = EasingNode.inOut(EasingNode.linear);
 const imperativeScrollOptions = {
   [FlatListComponentType]: {
     method: 'scrollToIndex',
@@ -139,6 +140,7 @@ type CommonProps = {
    * 1 => fully opened
    */
   animatedPosition?: Animated.Value<number>;
+  animatedPositionCurate?: Animated.Value<number>;
   /**
    * Configuration for the timing reanimated function
    */
@@ -146,6 +148,7 @@ type CommonProps = {
     duration?: number;
     easing?: Animated.EasingFunction;
   };
+  dragToss: number;
   /**
    * This value is useful if you want to take into consideration safe area insets
    * when applying percentages for snapping points. We recommend using react-native-safe-area-context
@@ -196,6 +199,7 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
    * Animated value that keeps track of the position: 0 => closed, 1 => opened
    */
   private position: Animated.Node<number>;
+  private positionCurate: Animated.Node<number>;
   /**
    * Flag to indicate imperative snapping
    */
@@ -248,7 +252,8 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
 
   constructor(props: Props<T>) {
     super(props);
-    const { initialSnapIndex, animationConfig } = props;
+    
+    const { initialSnapIndex, animationConfig, dragToss=DRAG_TOSS } = props;
     const animationDuration =
       animationConfig?.duration || DEFAULT_ANIMATION_DURATION;
 
@@ -397,7 +402,7 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
     const endOffsetY = add(
       this.lastSnap,
       this.translationY,
-      multiply(DRAG_TOSS, this.velocityY)
+      multiply((dragToss), this.velocityY)
     );
 
     this.calculateNextSnapPoint = (i = 0): Animated.Node<number> | number =>
@@ -518,6 +523,28 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
           clockRunning(this.animationClock)
         ),
         [
+          this.didScrollUpAndPullDown,
+          this.setTranslationY,
+          set(this.tempDestSnapPoint, add(snapPoints[0], this.extraOffset)),
+          cond(not(this.isManuallySetValue), set(this.nextSnapIndex, 0)),
+          set(
+            this.destSnapPoint,
+            cond(
+              this.isManuallySetValue,
+              this.manualYOffset,
+              this.calculateNextSnapPoint()
+            )
+          ),
+          cond(this.isManuallySetValue, [
+            set(this.animationFinished, 0)
+          ]),
+          set(
+            this.lastSnap,
+            sub(
+              this.destSnapPoint,
+              cond(eq(this.scrollUpAndPullDown, 1), this.lastStartScrollY, 0)
+            )
+          ),
           runTiming({
             clock: this.animationClock,
             from: cond(
@@ -540,7 +567,7 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
       )
     );
 
-    this.translateY = interpolate(
+    this.translateY = interpolateNode(
       add(translateYOffset, this.dragY, multiply(scrollY, -1)),
       {
         inputRange: [openPosition, closedPosition],
@@ -549,8 +576,13 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
       }
     );
 
-    this.position = interpolate(this.translateY, {
-      inputRange: [openPosition, closedPosition],
+    this.position = interpolateNode(this.translateY, {
+      inputRange: [snapPoints[snapPoints.length - 2], closedPosition],
+      outputRange: [1, 0],
+      extrapolate: Extrapolate.CLAMP,
+    });
+    this.positionCurate = interpolateNode(this.translateY, {
+      inputRange: [snapPoints[0], closedPosition],
       outputRange: [1, 0],
       extrapolate: Extrapolate.CLAMP,
     });
@@ -573,9 +605,9 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
   private getScrollComponent = () => {
     switch (this.props.componentType) {
       case 'FlatList':
-        return FlatList;
+        return RNAnimated.FlatList;
       case 'ScrollView':
-        return ScrollView;
+        return RNAnimated.ScrollView;
       case 'SectionList':
         return SectionList;
       default:
@@ -600,6 +632,7 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
       componentType,
       onSettle,
       animatedPosition,
+      animatedPositionCurate,
       containerStyle,
       ...rest
     } = this.props;
@@ -664,6 +697,14 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
               set(this.props.animatedPosition, this.position)
             )}
           />
+        )}
+            {this.props.animatedPositionCurate && (
+          <Animated.Code
+            exec={onChange(
+              this.positionCurate,
+              set(this.props.animatedPositionCurate, this.positionCurate)
+            )}
+          />
         )}
         <Animated.Code
           exec={onChange(
@@ -771,6 +812,7 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
       return (
         <TapGestureHandler
           maxDurationMs={100000}
+          enabled={false}
           ref={this.masterDrawer}
           maxDeltaY={initialSnap - this.getNormalisedSnapPoints()[0]}
           shouldCancelWhenOutside={false}
@@ -786,6 +828,8 @@ export class ScrollBottomSheet<T extends any> extends Component<Props<T>> {
     return (
       <TapGestureHandler
         maxDurationMs={100000}
+        enabled={false}
+
         ref={this.masterDrawer}
         maxDeltaY={initialSnap - this.getNormalisedSnapPoints()[0]}
       >
